MODULO 1

Podemos automatizar o processo de compilação que será disparado toda vez que um arquivo .ts for modificado. Para isso, vamos adicionar mais um script em alurabank/package.json, o script 
"start": "tsc -w":
para rodar:
npm start

Nesse capítulo, vimos:

Modelagem da classe Negociacao utilizando a sintaxe private.
Instalação e configuração do compilador TypeScript
A diferença entre o código que escrevemos e o código compilado
O modificador de acesso private
Compilação em tempo real dos arquivos .ts
=========================
MODULO 2

O TypeScript infere o tipo, sendo assim, a sintaxe é a mesma coisa que:

let nome: string = 'Flávio';
let idade: number = 20;
Se fizermos typeof nas duas variáveis temos como resultado string e number respectivamente:

let nome: string = 'Flávio';
console.log(typeof(nome));  // string
let idade: number = 20; 
console.log(typeof(idade));// number

Neste capítulo, vimos:

O tipo implícito any
Utilização de tipos explícitos
Conversão explícita de tipos através de casting
Benefícios de utilizarmos os tipo específicos
=========================
MODULO 3

Vimos neste capítulo:

Criando de um novo modelo para encapsular uma lista de objetos do tipo Negociacao.
Array e generics
Manipulação declarativa do DOM através de template
Template dinâmico
=========================
MODULO 4

Vimos neste capítulo:

Reuso de código através de herança
Generics
Classes abstratas
=========================
MODULO 5

jQuery foi criado com TypeScript? Com certeza não e, se não foi, não possui variáveis, propriedades e parâmetro de métodos e funções tipados. Então, como suportar os recursos da linguagem TypeScript com uma biblioteca que não foi criada utilizando nessa linguagem?

Os criadores da biblioteca ou terceiros podem criar um arquivo chamado TypeScript Declaration File. Este arquivo possui informações dos nomes de métodos e funções, inclusive tipos que podem ser utilizados pelo TypeScript. Quando carregado, o TypeScript conseguirá, baseado nesse arquivo, realizar checagem estática inclusive lançar mão de todos seu poder através de seu editor ou IDE favorita.

No caso, vamos instalar o tipo do jQuery. Vale lembrar que esse tipo não foi definido pela equipe do jQuery:

npm install @types/jquery@2.0.42 --save-dev

*Para saber mais: o repositório @types
No npm, existe uma série de TypeScript definitons files para as mais diversas bibliotecas e frameworks do mercado. Por exemplo, se quisermos instalar o tds do jQuery, acessamos

https://www.npmjs.com/package/@types/jquery

Se quisermos do lodash ou underscore acessamos

https://www.npmjs.com/package/@types/lodash

https://www.npmjs.com/package/@types/underscore
Dessa forma, antes de sair buscando pela internet os arquivos tsd que precisamos, podemos tentar a sorte executando o comando:

npm install @types/nomeDaLibOuFramework --save-dev
Nesse sentido, se quisermos instalar os tds das três bibliotecas que foram citadas, fazemos:

npm install @types/jquery --save-dev
npm install @types/loadash --save-dev
npm install @types/underscore --save-dev
Qualquer tds files que esteja dentro de node_modules/@types será lidado automaticamente pelo compilador do TypeScript.

É preciso se conformar quando não houver do Typing para sua biblioteca preferia, neste caso, a estratégia do declare var que vimos neste treinamento é uma saída, não muito ideal, mas que permitirá seu código compilar até que você encontre seu tsd.

Não é raro o desenvolvedor querer comentar seu código, seja no estilo livro ou usando uma forma padronizada. No entanto, não faz sentido esses comentários irem para o arquivo de produção, pois além de deixarem evidente para terceiros o que o código que escrevemos faz, ainda acaba impactando no tamanho final do arquivo.

Podemos resolver esse problema facilmente solicitando ao compilador do TypeScript que remova todos os comentários do arquivo JavaScript resultante da compilação do nosso código TypeScript. Para isso, basta adicionar a propriedade "removeComments": true no arquivo tsconfig.json.

Vimos neste capítulo:

O problema de usarmos bibliotecas que ficam no escopo global e que não foram criados com TypeScript
"Calar a boca" do compilador com declare var.
As desvantagens de declare var com o tipo any.
O papel do TypeScript Definition.
Instalação de arquivos td.s de terceiros
Remoção de comentário durante a compilação
=========================
----
# # PARTE 2
----

=========================
MODULO 1
Hoje a definição das nossas classes vivem no escopo global. Além disso, para que o desenvolvedor saiba quais são as classes disponíveis pelo autocomplete do TypeScript ele precisa saber pelo menos parte do nome. Contudo, TypeScript oferece o conceito de namespace. Podemos agrupar classes dentro de um mesmo namepace e acessá-las através dele.

No caso, vamos envolver todas as classes dentro de alurabank/app/views no namespace Views:

namespace Views {

    export abstract class View<T> {

        protected _elemento: JQuery;

        constructor(seletor: string) {

            this._elemento = $(seletor);
        }

        update(model: T) {

            this._elemento.html(this.template(model));
        }

        abstract template(model: T): string;

    }

}

A sintaxe de módulos do ES2015 considera cada script um módulo e através das instruções import e export importamos e exportamos artefatos respectivamente.
Adequando todos os arquivos para o sistema de módulos do ES2015:
import { View } from './View';
import { Negociacoes } from '../models/Negociacoes';

export class NegociacoesView extends View<Negociacoes> {
    ...
}

LITE-SERVER
Como vimos, precisamos servir nossa aplicação através de um servidor web. Utilizaremos o lite-server. Além dele servir a pasta alurabanl/app para nós, ele ainda suporta livereloading através do BrowserSync que traz embutido. Isso é perfeito, pois toda vez que os arquivos .ts forem modificados e os arquivos .js gerados nosso navegador automaticamente será recarregado.

Rodando scripts paralelamente com o módulo concurrently
Vamos instalar o módulo concurrently. Ele nos permitirá rodar os dois scripts que criamos em paralelo nas plataformas Windows, MAC e Linux.

Agora, vamos renomear o script "start" para "watch" e adicionar novamente o script "start" que chamará o módulo concurrently:

{
  "name": "alurabank",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "compile": "tsc",
    "watch": "tsc -w",
    "server": "lite-server --baseDir=app",
    "start": "concurrently \"npm run watch\" \"npm run server\""
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@types/jquery": "^2.0.42",
    "concurrently": "^3.4.0",
    "lite-server": "^2.3.0",
    "typescript": "^2.3.2"
  }
}
Excelente, agora, no terminal, basta executarmos o comando npm start para termos os dois serviços rodando em paralelo em um único terminal.

npm start

Podemos simplificar bastante a importação dos módulos através da estratégia Barrel (barril). Nela, um módulo importa e exporta todos os artefatos de uma pasta permitindo assim que apenas o barril seja importado na cláusula from.

Vejamos:

// app/ts/views/index.ts

export * from './View'; 
export * from './MensagemView'; 
export * from './NegociacoesView';
// app/ts/models/index.ts

export * from './Negociacao'; 
export * from './Negociacoes';

O loader utilizado nos obriga a escrever index no final da importação do módulo. Projetos em Angular e Ionic que fazem uso do Webpack podem omiti-lo na importação. O importante é sabermos desta forma prática de organizar nossos módulos.

Aprendemos neste capítulo:

A utilizar namespaces
Sistemas de módulos do ES2015
O papel de um loader
Levantar um servidor local
Organização de módulo em barris
=========================
MODULO 2

Nossa classe Negociacao possui atributos privados, pois não faz sentido alterarmos uma instância de Negociacao depois de criada. Vamos recapitular:

export class Negociacao {

    constructor(private _data: Date, private _quantidade: number, private _valor: number) {}

    get data() {

        return this._data;
    }

    get quantidade() {

        return this._quantidade;
    }

    get valor() {

        return this._valor;
    }

    get volume() {

        return this._quantidade * this._valor;
    }
}

Contudo, o TypeScript possui um atalho para declaração de propriedades somente leitura. Para isso, basta usarmos o modificador readonly.

export class Negociacao {

    constructor(readonly data: Date, readonly quantidade: number, readonly valor: number) {}

    get volume() {

        return this.quantidade * this.valor;
    }
}
Veja que não foi necessário criar os getters para que pudéssemos acessar as propriedades que antes eram privadas. Agora, qualquer atribuição feita às propriedades resultarão em erro de compilação.

Esse código não compila. Parâmetros opcionais devem ser sempre os últimos parâmetros.
function (a?: number, b?:number, c:number): void { ... }
 
 Muitas vezes, atribuímos null e undefined à variáveis para realizarmos alguma espécie de controle. Mas esses tipos podem causar problemas em runtime em nosso código se não tivermos cuidado com eles:
 let nome: string = '';
nome = null; // algo permitido

Contudo, o TypeScript possui o modo strickNullChecks. Neste modo, null e undefined não fazem parte do domínio dos tipos e só podem ser atribuídos a eles mesmos. Com a exceção de undefined, que pode ser atribuído a void. Isso pode ser interessante para evitarmos valores nulos e indefinidos em nosso projeto.
Vamos ativá-lo em tsconfig.json:
{
    "compilerOptions": {
        "target": "es6",
        "outDir": "app/js",
        "noEmitOnError": true, 
        "noImplicitAny": true,
        "removeComments": true,
        "module": "system",
        "strictNullChecks": true
    },
    "include": [
        "app/ts/**/*"
    ]
}

Agora, nosso código deixará de compilar.
let nome: string = '';
// erro de compilação
nome = null;

// deixarmos explícitos que a função pode retornar boolean ou null
function minhaFuncao(flag: boolean): boolean | null {

    let valor = null;
    if(flag) return null;
    return true;
}

let x = minhaFuncao(false);
Agora, como explicitamos que seu retorno pode ser também null, nosso código passará pelo strictNullChecks. Curiosamente, linguagens como a Golang permitem uma função ou método ter mais de um tipo de retorno.

TypeScript possui um tipo curioso, o tipo never. Este tipo é aplicável à métodos ou funções que por algum motivo, planejado ou não, podem não terminar sua execução de seu bloco.
Exemplos clássicos são os de métodos que caem em um loop infinito ou de métodos que sempre retornam exceções. Exceções fazem com que o método não execute até o fim.
Não confundir o tipo never com o tipo void. O segundo, apesar de indicar que a função ou método nada retorna, indica que a função ou método executará até o fim, mesmo que não retorne nada.
Geralmente não usamos esse tipo em nosso código, mas ele pode aparecer como aviso do compilador. Quando aparecer, você já saberá que a execução do seu método nunca chegará até o fim, sendo um forte indicativo de um bug em seu código.


Vamos alterar nosso código para não permitir que negociações feitas no sábado ou no domingo sejam cadastradas.

// app-src/controllers/NegociacaoController.ts

    adiciona(event: Event) {
        ...
        let data = new Date(this._inputData.val().replace(/-/g, ','));

        if(data.getDay() == 0 || data.getDay() == 6) {

            this._mensagemView.update('Somente negociações em dias úteis, por favor!');
            return 
        }
        ...
    }
No entanto, ver em nosso código algo como ==0 e ==6 não nos diz muita coisa. Poderíamos até ter criado uma variável como sabado ou domingo, contudo o TypeScript possui um recurso mais elegante para o problema que estamos vendo, as enumerations.

Dentro do mesmo arquivo que definimos nosso controller, vamos criar a enum DiaDaSemana:

enum DiaDaSemana {
    Domingo,
    Segunda,
    Terca,
    Quarta, 
    Quinta, 
    Sexta, 
    Sabado, 
}

// exemplo
enum Tipo {

    ESPECIAL,
    PADRAO
}

Sabemos que o valor de Tipo.ESPECIAL e Tipo.PADRAO serão 0 e 1 respectivamente.

Agora, em nosso código fazemos:

let tipo: Tipo = Tipo.ESPECIAL;
É uma sintaxe totalmente válida. E agora?

let tipo: Tipo = 4;
O código anterior compila? Compila! Se você vem de outra linguagem como Java ou C#, este código não compilaria, porque só poderíamos utilizar os tipos Tipo.ESPECIAL e Tipo.PADRAO.

A questão é que a enum tem como subtipo number, por isso pode receber qualquer outro número que não esteja dentro do escopo da Enum.

Aprendemos neste capítulo:

Definir propriedades readonly
Parâmetros opcionais
Habilitar strictNullCheck
O uso de Enum
=========================
MODULO 3

Podemos isolar a lógica do nosso teste de performance em um único lugar e aplicá-lo nos métodos que temos interesse sem que tenhamos que modificar sua implementação. Para tal, precisamos ativar em nosso compilador TypeScript a configuração experimentalDecorators. Quando true, permite utilizar decorators, estrutura que atenderá nossa finalidade.

Como criar um decorator? Vamos criar o arquivo app/ts/helpers/decorators/logarTempoDeExecucao.ts e nele exportamos uma função de mesmo nome:

export function logarTempoDeExecucao() {
    ...
}

Agora, importando e utilizando em View

import { logarTempoDeExecucao } from '../helpers/decorators/index';

export abstract class View<T> {
    ...
    @logarTempoDeExecucao()
    update(model: T) {
        ...
    }
}

Usamos decorator através de um @, seguido do nome do decorator, abrindo e fechando parênteses no final, justo, porque um decorator nada mais é do que uma função.

Recarregando nossa aplicação tudo continua funcionando. Agora precisamos escrever a lógica do teste de performance em nosso decorator.

Nossa aplicação é funcional, mas podemos organizar ainda melhor nosso código. Percebam que no constructor() de NegociacaoController procuramos os elementos do DOM para que possamos extrair seus valores ao adicionarmos uma negociação. Essa busca é feita assim que nossa classe é instanciada. Mas se o usuário abre a aplicação e desiste de adicionar negociações? Nós teríamos varrido o DOM desnecessariamente. Além disso, se nossa aplicação crescer e tiver que interagir com mais elementos, já estaríamos buscando todos de uma vez. Podemos melhorar isso com auxílio de decorators de propriedades.

Antes de criarmos nosso decorator, queremos algo assim:

import { NegociacoesView, MensagemView } from '../views/index';
import { Negociacoes, Negociacao } from '../models/index';

export class NegociacaoController {

@domInject('#data')
private _inputData: JQuery;

@domInject('#quantidade')
private _inputQuantidade: JQuery;

@domInject('#valor')
private _inputValor: JQuery;
....
}

Nosso código não compila, claro, mas a ideia é injetarmos os elementos do DOM diretamente na propriedade da classe. Além disso, usaremos a estratégia de lazy loading. Por debaixo dos panos, vamos substituir cada propriedade por um getter. Sendo um getter, podemos escrever um bloco de código que ainda assim para o JavaScript ele será considerado uma propriedade. Nesse bloco de código, só buscaremos o elemento do DOM quando o getter for acessado pela primeira vez. Novos acessos retornarão o mesmo elemento!

// app/ts/helpers/decorators/domInject.ts 

export function domInject(seletor: string) {

    return function(target: any, key: string) {

        let elemento: JQuery;

        const getter = function() {

            if(!elemento) {
                console.log(`buscando  ${seletor} para injetar em ${key}`);
                elemento = $(seletor);
            }

            return elemento;
        }
    }
}

Aprendemos neste capítulo:

Isolar requisitos funcionais através de decorators
Decorators de métodos
Decorators de propriedades
A estratégia de lazy loading
=========================
MODULO 4

Para consumirmos a API externa, utilizaremos a API fetch que usa o padrão de projeto Promise. Por usar Promise, seu uso é mais simplificado do que trabalharmos com XMLHttpRequest.

// app/ts/controllers/NegociacaoController.js
importarDados() {

    fetch('http://localhost:8080/dados')

}

Através da chamada da função then temos acesso à resposta que precisa ser convertida (parse) adequadamente e a Fetch API já traz na própria resposta o método .json() que realiza essa conversão de JSON para objetos em JavaScript. Como usamos arrow function sem bloco, o resultado da instrução res.json() é retornado automaticamente sem a necessidade de usarmos um return e quando fazemos isso, temos acesso ao retorno na próxima chamada encadeada à função then.

Contudo, pode ser que o servidor execute corretamente nossa operação (sem devolver erro 500, por exemplo), mas devolva algum código de status que indique erro, dessa forma, em vez de ficarmos acessando cada código em separadamente podemos acessar status.ok para saber se a resposta é válida com um status válido.

Vamos isolar a lógica do teste em uma função que retorna res caso esteja tudo correto ou lance uma exceção caso haja algum problema. No caso, podemos usar o tipo Response para res, garantindo assim a checagem do TypeScript evitando o acesso a métodos que não existam, seja por um momento lacônico nosso ou por um erro de digitação:

// app/ts/controllers/NegociacaoController.js
importarDados() {

    function isOK(res: Response) {

        if(res.ok) {
            return res;
        } else {
            throw new Error(res.statusText);
        }
    }

    fetch('http://localhost:8080/dados')
        .then(res => isOK(res))
        .then(res => res.json())
}

Mas o TypeScript reclamará em breve que há um tipo implícito any sendo empregado pelo nosso código. Resolvemos isso explicitando que o tipo retornado é any[], um array de qualquer tipo:

fetch('http://localhost:8080/dados')
.then(res => isOK(res))
.then(res => res.json())
.then((dados: any[]) => {
    ...
})

omo os dados recebidos são do tipo any[], o TypeScript não consegue detectar erros como a escrita da propriedade errada. Podemos resolver isso criando uma Interface:

// app/ts/models/NegociacaoParcial.ts

export interface NegociacaoParcial {

    vezes: number,
    montante: number;
}
Veja que a interface define duas propriedades e seus tipos. Não é à toa que essas propriedades são as mesmas da nossa API externa. Agora, sem a necessidade de instanciarmos uma classe, até porque interfaces não podem ser instanciadas, podemos usar o tipo NegociacaoParcial[] em vez de any[] nos dados retornados pela nossa API. Isso será suficiente para que o TypeScript consiga analisar nosso código e checar por erros, inclusive fornecendo autocomplete:

// app/ts/models/NegociacaoParcial.ts

export interface NegociacaoParcial {

    vezes: number,
    montante: number;
}

Veja que a interface define duas propriedades e seus tipos. Não é à toa que essas propriedades são as mesmas da nossa API externa. Agora, sem a necessidade de instanciarmos uma classe, até porque interfaces não podem ser instanciadas, podemos usar o tipo NegociacaoParcial[] em vez de any[] nos dados retornados pela nossa API. Isso será suficiente para que o TypeScript consiga analisar nosso código e checar por erros, inclusive fornecendo autocomplete:

then((dados: NegociacaoParcial[]) => {
    dados
        .map(dado => new Negociacao(new Date(), dado.vezes, dado.montante))
        .forEach(negociacao => this._negociacoes.adiciona(negociacao));
    this._negociacoesView.update(this._negociacoes);
})

Essa solução não blinda da mudança inesperada da API, por exemplo, mudar montante para valor. Continuaríamos com um erro em runtime. Mas uma vez detectado o erro, podemos alterar nossa interface NegociacaoParcial mudando de montante para valor e isso resultará em um erro de compilação em todos os lugares que usam a interface. Perfeito, pois enquanto o desenvolvedor não ajustar para o formato da API que mudou, seu código não compilará. As chances de ele esquecer de mudar são nulas, pois seu código só compilará após a correção.

Do jeito que nossa aplicação esta, se clicarmos muitas vezes em seguida no botão de importar negociações executaremos várias requisições para o servidor. Não há necessidade de tanta ansiedade por parte do usuário, mas para nos prevenirmos disso, podemos ignorar cliques que estejam dentro de uma janela de tempo definida pelo programador. No caso, se o usuário clicar em menos de meio segundo, cancelaremos a ação dele e iniciaremos uma nova. Em suma, essa solução utilizará um timer para processar as ações do usuário:

Excelente, nosso código funciona. Quando o usuário clicar pela primeira vez, qualquer temporizador que esteja sendo processado será cancelado e um novo será criado. É esse temporizador que executará nosso código. Se os meio segundos passarem, o temporizador executará nosso código. Então, se ele ficar clicando várias vezes em menos de meio segundo, apenas a última operação será executada.

No entanto esse código é muito invasivo, pois mistura sua lógica com a lógica do método do controller. Além disso, podemos querer usar a mesma estratégia em outros métodos da nossa aplicação. Aprendemos a criar decorators que isolam um código e que podem ser utilizados em vários lugares. Vamos criar o decorator chamado throttle, aliás, o padrão de projeto que lida com o problema que estamos enfrentando:
// app/ts/helpers/decorators/throttle.ts

export function throttle(milissegundos = 500) {
    ...
}

Agora, basta utilizarmos nosso decorator no método do nosso controller:

// código anterior omitido 
@throttle()
importaDados() {

Contudo, se usarmos o mesmo decorator como método adiciona() de NegociacaoController teremos um problema. A página será recarregada. Isso acontece, porque como postergarmos a execução do nosso código, postergamos também event.preventDefault(). A boa notícia, é que podemos acessar event implicitamente dentro da chamada de qualquer função, sem necessariamente ele ter sido passado como parâmetro ou não para ela. Nesse sentido, vamos realizar sempre um event.preventDefault() em todos os métodos que usarem nosso decorator throttle:

descriptor.value = function (...args: any[]) {
    if (event) event.preventDefault();
    ...
}

Veja também que o TypeScript saber que event é uma variável implícita que pode existir ou não em uma função e por isso adota o tipo implícito Event, fantástico!
--
A lógica de acesso à nossa API esta fixa no método importaDados de NegociacaoController. O problema dessa abordagem é que se quisermos acessar a API em outro controller, teremos que repetir código. Podemos enviar isso isolando a lógica de importação na classe NegociacaoService.

// app/ts/services/NegociacaoService.ts

import { NegociacaoParcial, Negociacao } from '../models/index';

export class NegociacaoService {

    obterNegociacoes(handler: Function): Promise<Negociacao[]> {

        return fetch('http://localhost:8080/dados')
            .then(res => handler(res))
            .then(res => res.json())
            .then((dados: NegociacaoParcial[]) => 
                dados.map(dado => new Negociacao(new Date(), dado.vezes, dado.montante))
            )
            .catch(err => console.log(err));

    }
}

Um ponto a destacar é que nosso método recebe uma handler, isto é, a função que considerará ou não a operação válida. Não podemos deixar simplesmente fixo esse código no serviço, queremos dar flexibilidade para o programador pode aplicar outros critérios que não sejam res.ok.

Por fim, o retorno do método será a Promise, resultado de fetch. No entanto, Promise é um tipo genérico e precisamos indicar qual tipo estará disponível ao acessarmos seu retornado através de then. É por isso que usamos Promise<Negociacao[]>, pois através de then teremos acesso ao array de negociações.
--
O método importaNegociacoes de NegociacaoServive aceita receber uma função. Não é à toa que usamos o tipo Function. No entanto, podemos passar qualquer função. Por exemplo, uma que não recebe um Response e muito menos o retorna:

Alguém nos impede de fazermos:

// dará erro, passar function() {} ou () => {}
this._service
    .obterNegociacoes(function() {})
    ...

Podemos restringir um pouco mais quais funções podem ser passadas para o método através de uma interface. Com ela, apenas as funções que receberem o único parâmetro Response e retornarem Response serão válidos:
obterNegociacoes(handler: ResponseHandler): Promise<Negociacao[]> {
    ...
}
export interface ResponseHandler {

    (res: Response): Response
}

A interface ResponseHandler é o tipo que define que a função deve receber um parâmetro do tipo Response e devolver um Response. Inclusive, lá no método obterNegociacoes mudamos o tipo de Function para ResponseHandler.

Agora, em NegociacaoController, nosso código não compila com a função indevida que passarmos e somos alertados disso através do compilador do TypeScript. Se passarmos isOk novamente, tudo continuará funcionando, pois isOk segue a assinatura da interface.

Podemos até fazermos isso se desejarmos:

// app/ts/controllers/NegociacaoController.ts
import { ResponseHandler } from '../services/index';
// código anterior omitido 
@throttle()
importaDados() {
    // de
    const isOk: ResponseHandler = (res: Response) => {
        if(res.ok) return res;
        throw new Error(res.statusText);
    }
...

Ou, para evitarmos que digitar um pouco, podemos passar uma arrow function diretamente:
.obterNegociacoes(res => {
    if (res.ok) return res;
    throw new Error(res.statusText);
})

Neste capítulo vimos:

O consumo de uma API externa
O problema da ausência de tipos do retorno da API
Uso de interface para criar um contrato
O padrão de projeto Throttle e sua aplicação através de decorators
Interface para definir a estrutura de funções
=========================
MODULO 5

lindo com interfaces 

Nosso código continua funcionando, excelente. Deixamos de herdar desnecessariamente de uma classe e garantimos um comportamento comum entre objetos através de uma interface. Contudo, há algo curioso.

Não é necessário que uma classe implemente a interface para que seja um valor válido. A implementação de uma interface não deixa o desenvolvedor esquecer de implementar o método, mas podemos fazer algo assim que é totalmente válido:

imprime(negociacao, this._negociacoes, { paraTexto: () => console.log('oi')});
Veja que o terceiro parâmetro é um objeto JavaScript que possui a função paraTexto com a mesma assinatura da interface Imprimivel. TypeScript é inteligente e quando encontra uma paridade com o tipo de interface compila o código. Basta trocarmos uma letrinha por exemplo, paraText para que o código não compile.

Vimos que ao implementarmos uma interface que possua métodos, seremos obrigados a implementá-los respeitando sua assinatura. Além disso, podemos utilizar o tipo da interface para referenciar objetos que implemente a interface. Falando em método, isto é, comportamento de objetos, não é raro termos que comparar um objeto com outro. Aliás, a implementação desta comparação pode divergir entre diferentes objetos.

Dessa forma, podemos criar a interface Igualavel que possua o método ehIgual. O método deve receber como parâmetro um objeto de mesmo tipo do objeto envolvido na comparação, retornando true ou fase para indicar igualdade ou não.

// app/ts/models/Igualavel.ts
export interface Igualavel<T> {

    ehIgual(objeto: T): boolean
}

Excelente, mas a implementação de Imprimivel e Igualavel é algo bem comum de implementarmos para praticamente todos nossas classes do modelo. É por isso que podemos criar uma interface que estende essas duas que criamos, bastando implementarmos a nova interface agregado.

Vamos criar a interface MeuObjeto:

import { Imprimivel, Igualavel } from './index';

export interface MeuObjeto<T> extends Imprimivel, Igualavel<T>  { }

Uma interface pode estender quantas interfaces forem necessárias. No caso, MeuObjeto teve que usar o tipo genético <T> para que esse seja considerado na interface Igualave.

Agora, vamos fazer com que Negociacao e Negociacoes implementem MeuObjeto:

import { MeuObjeto } from './index';

export class Negociacao implements MeuObjeto<Negociacao> {

   // código omitido 
}

Union Types

Para resolvermos este problema, poderíamos ter usado o tipo any, mas nesse caso perderíamos o autocomplete e a checagem mais rígida do TypeScript que garante a saúde do nosso código.

Podemos fazer com que a função aceite tanto string quanto number através de union types. Alterando nosso código:

// ATENÇÃO, NOSSO CÓDIGO AINDA NÃO COMPILARÁ

// agora aceita os tipos string e number!
function processaToken(token: string | number) {

    // muda o dígito 2 por X!
        / erro de compilação aqui
    return token.replace(/2/g,'X');
}

// compila
const tokenProcessado1 = processaToken('1234');
// compila
const tokenProcessado2 = processaToken(1234);

 Guards
Podemos fazer com que nosso código compile checando o tipo dentro da função:

function processaToken(token: string | number) {

    if(typeof(token) === 'string') {

        // typescript entende que é o tipo string e faz autocomplete para este tipo. A função replace só existe em string
        return token.replace(/2/g,'X');
    } else {
        // toFixed só existe em mumber!
        return token.toFixed().replace(/2/g,'X');
    }

}

const tokenProcessado1 = processaToken('1234');
const tokenProcessado2 = processaToken(1234);

Com Type Guards, quando realizamos o teste verificando o tipo do parâmetro, dentro da condição o compilador saber inferir o tipo correto e a checagem e autocomplete para aquele tipo é ativado. Dentro do if o tipo é considerado string e no else number.

Considerações sobre o uso de Type Guards
Apesar de ser um recurso da linguagem, essa estratégia remete à programação procedural pois envolve uma sucessão de if's para detectar o tipo dos elementos. É por este motivo que não foi utilizado em nosso projeto e demos preferência ao polimorfismo.

Vimos um requinte da linguagem TypeScript é que é o uso de Union Types e Type Guards.

Vejamos um exemplo:

function processaToken(token: string | number) {

    if(typeof(token) === 'string') {

        return token.replace(/2/g,'X');
    } else {
        return token.toFixed().replace(/2/g,'X');
    }

}
Contudo, é possível criar um alias para todos os tipos envolvidos no union type. Vejamos:


// criando o alias!
type MeuToken = string |  number;

function processaToken(token: MeuToken) {

    if(typeof(token) === 'string') {

        return token.replace(/2/g,'X');
    } else {

        return token.toFixed().replace(/2/g,'X');
    }

}
O código continua compilando, mas em vez de indicarmos no parâmetro da função os tipos string e number, passamos o alias que criamos, no caso MeuToken. O Type alias é interessante quando trabalhamos com muitos union types e queremos padronizar em um único local esses conjunto de tipos.

É um recurso que não utilizamos em nossa aplicação, mas que o aluno precisa conhecer para poder analisar código de terceiros com maior segurança.

Vimos neste capítulo:

Um pouco mais de polimorfismo em linguagens estaticamente tipadas
Interface que definem a assinatura de métodos
A não importar negociações duplicadas
Que uma interface pode estender quantas interfaces forem necessárias

TypeScript se baseia no ES2015, todavia, na versão ES2017 foi introduzida a sintaxe async/await. Ela funciona da seguinte maneira. Dentro de uma uma função ou método async, isto é, uma função ou método declarado como async NomeDoMetodoOuFuncao, podemos tratar o retorno de promises de uma maneira muito especial.

Por padrão, capturamos o retorno de uma promise dentro da função then. Mas se dentro de uma função async, usamos a instrução await antes da chamada de um método que retorne uma promise, podemos capturar seu retorno sem a necessidade da chamada de then, como se ela fosse uma função síncrona tradicional.

Vejamos um exemplo:

// o método importDados é um método async!

Mas se não chamamos mais then, não chamaremos também catch, certo? Então, como conseguiremos tratar possíveis erros? Quando usamos async/wait, por mais que o código seja assíncrono, podemos usar try e catch para lidar com possíveis exceções em nosso código. Por mais que nosso código pareça um código síncrono, ele continua sendo um código assíncrono.

A boa notícia é que mesmo o TypeScript suportando apenas o ES2015 ele introduziu em sua sintaxe o async/await do ES2017 a partir da sua versão 2.3. Isso não quer dizer que somos obrigados a utilizá-la, mas seu uso melhor bastante a legibilidade do nosso código.